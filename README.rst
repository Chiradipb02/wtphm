.. comment

Overview
********

The **W**\ind **T**\urbine **P**\rognostics and **H**\ealth **M**\anagement library
processes wind turbine events (also called alarms or status) data, as well as
operational SCADA data (the usually 10-minute data coming off of wind turbines).

Turbine alarms often appear in high numbers during fault events, and significant
effort can be involved in processing these alarms in order to find what actually
happened.
This module solves this by grouping similar alarm sequences together into "batches"
of alarms, assigning a high-level "stoppage category" to each batch, and providing
functionality to overlay this onto operational scada data for labelling for
training predictive maintenance algorithms or reliability analysis.

Although there are commercial packages that can perform this task, this library
aims to be an open-source alternative for use by the research community.
It was borne out of my own work for trying to process data for use in my PhD -
hopefully this will allow other researchers to get into analysis quicker.

I would greatly appreciate if you could acknowledge this repo if using it for
any research objective.

Please raise issues on GitHub for any bugs, questions or feature requests.


Is my Data Compatible?
**********************

The data manipulated in this library are turbine events/status/alarms data and
10-minute operational SCADA data.
They must be in the formats described below.

Event Data
==========

.. start event comment

The ``event_data`` is related to any fault or information messages generated by
the turbine. This is instantaneous, and records information like faults that have
occurred, or status messages like low- or no- wind, or turbine shutting down due
to storm winds.

The data must have the following column headers and data:

* ``turbine_num``: The turbine the data applies to
* ``code``: There are a set list of events which can occur on the
  turbine. Each one of these has an event code
* ``description``: Each event code also has an associated description
* ``time_on``: The start time of the event
* ``time_off``: The end time of the event
* ``duration``: The duration of the event (can be calculated from the two above)
* ``stop_cat``: This is a category for the event if it has caused the turbine to
  stop, or else its functional location in the turbine. E.g. if the event is
  related to a pitch fault, it's stop category would be "fault-pitch", or something
  similar.

**Important**: In addition, there must be a specific event ``code`` which
signifies return to normal operation after any downtime or abnormal operating
period.

.. end event comment

SCADA/Operational data
======================

.. start scada comment

The ``scada_data`` is typically recorded in 10-minute intervals and has attributes like
average power output, maximum, minimum and average windspeeds, etc. over the previous
10-minute period.

For the purposes of this library, it must have the following column headers and
data:

* ``turbine_num``: The turbine the data applies to
* ``time``: The 10-minute period the data belongs to
* availability counters: Some of the functions for giving the batches a stop
  category rely on availability counters. These are sometimes stored as part of
  scada data, and sometimes in separate availability data. They count the portion
  of time the turbine was in some mode of operation in each 10-minute period,
  for availability calculations. For example, maintenance time, fault time, etc.
  In order to be used in this library, the availability counters are
  assumed to range between 0 and
  *n* in each period, where *n* is some arbitrary maximum (typically 600, for
  the 600 seconds in the 10-minute period).

.. end scada comment

Documentation
*************
Documentation and user guide can be found on readthedocs
`here <https://wtphm.readthedocs.io/en/latest/>`_. A local copy of the docs can
be built by running `<docs/build_docs.bat>`_ with sphinx installed.
